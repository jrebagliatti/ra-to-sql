/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ra = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,14],$V3=[1,15],$V4=[5,7,8],$V5=[2,16],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,26],$Vb=[5,7,8,14,27,28,29,30],$Vc=[1,37],$Vd=[1,35],$Ve=[1,34],$Vf=[1,36],$Vg=[1,38],$Vh=[1,52],$Vi=[1,48],$Vj=[1,49],$Vk=[1,51],$Vl=[1,55],$Vm=[14,24,32],$Vn=[1,57],$Vo=[1,56],$Vp=[1,58],$Vq=[1,59],$Vr=[14,24,30,32,33,34,35,40,41,42,43,44,45,47,49],$Vs=[14,24],$Vt=[14,24,47],$Vu=[14,24,47,49],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,82],$VC=[9,12,30,36,37],$VD=[14,24,30,32,33,40,41,42,43,44,45,47,49];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ra_program":3,"ra_sentences":4,"EOF":5,"ra_sentence":6,"NEWLINE":7,";":8,"IDENTIFIER":9,"<-":10,"ra_expression":11,"(":12,"field_list":13,")":14,"tableName":15,"projection":16,"selection":17,"union":18,"intersection":19,"product":20,"subtraction":21,"PROJ":22,"[":23,"]":24,"SEL":25,"bool_expression":26,"UNION":27,"INTERSECTION":28,"PRODUCT":29,"-":30,"e":31,"COMMA":32,"+":33,"*":34,"/":35,"NUMBER":36,"STR":37,"b_e":38,"bool_operator":39,">":40,"<":41,"<=":42,">=":43,"=":44,"<>":45,"term":46,"OR":47,"factor":48,"AND":49,"TRUE":50,"FALSE":51,"!":52,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"NEWLINE",8:";",9:"IDENTIFIER",10:"<-",12:"(",14:")",22:"PROJ",23:"[",24:"]",25:"SEL",27:"UNION",28:"INTERSECTION",29:"PRODUCT",30:"-",32:"COMMA",33:"+",34:"*",35:"/",36:"NUMBER",37:"STR",40:">",41:"<",42:"<=",43:">=",44:"=",45:"<>",47:"OR",49:"AND",50:"TRUE",51:"FALSE",52:"!"},
productions_: [0,[3,2],[4,1],[4,3],[4,3],[6,3],[6,6],[6,1],[11,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[15,1],[16,7],[17,7],[18,3],[19,3],[20,3],[21,3],[13,1],[13,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,1],[31,1],[31,1],[38,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[26,1],[26,3],[46,1],[46,3],[48,1],[48,1],[48,1],[48,2],[48,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2:
 this.$ = new Array($$[$0]); 
break;
case 3: case 4:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 5:
 this.$ = { type: 'identifier', value: { id: $$[$0-2], expression: $$[$0].value} }; 
break;
case 6:
 this.$ = { type: 'identifier', value: { id: $$[$0-5], expression: $$[$0].value, fields: $$[$0-3] } }; 
break;
case 7:
 this.$ = { type: 'expression', value: $$[$0] }; 
break;
case 8:
 this.$ = {id: yy.getNewId('GROUP'), value: $$[$0-1].value }; 
break;
case 9:
 this.$ = {id: yy.getNewId('ID'), value: $$[$0] }; 
break;
case 10: case 11:
 this.$ = {id: yy.getNewId('PROJ'), value: $$[$0] }; 
break;
case 12: case 13:
 this.$ = {id: yy.getNewId('UNION'), value: $$[$0] }; 
break;
case 14:
 this.$ = {id: yy.getNewId('PROD'), value: $$[$0] }; 
break;
case 15:
 this.$ = {id: yy.getNewId('SUBS'), value: $$[$0] }; 
break;
case 16:
 this.$ = yy.getSingleTable($$[$0]); 
break;
case 17:
 this.$ = yy.getProjection($$[$0-1].value, $$[$0-1].id, $$[$0-4]); 
break;
case 18:
 this.$ = yy.getSelection($$[$0-1].value, $$[$0-1].id, $$[$0-4]); 
break;
case 19:
 this.$ = yy.getUnion($$[$0-2].value, $$[$0].value); 
break;
case 20:
 this.$ = yy.getIntersection($$[$0-2].value, $$[$0].value); 
break;
case 21:
 this.$ = yy.getProduct($$[$0-2].value, $$[$0].value); 
break;
case 22:
 this.$ = yy.getSubtraction($$[$0-2].value, $$[$0].value); 
break;
case 23:
this.$ = new Array($$[$0])
break;
case 24:
 
            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 25:
 this.$ = $$[$0-2] + '+' + $$[$0]; 
break;
case 26:
 this.$ = $$[$0-2] + '-' + $$[$0]; 
break;
case 27:
 this.$ = $$[$0-2] + '*' + $$[$0]; 
break;
case 28:
 this.$ = $$[$0-2] + '/' + $$[$0]; 
break;
case 29:
 this.$ = '-' + $$[$0];
break;
case 30: case 49:
 this.$ =  '(' + $$[$0-1] + ')'; 
break;
case 31:
 this.$ = Number(yytext); 
break;
case 33:
 this.$ = "'" + $$[$0] + "'" 
break;
case 34:
 this.$ = yy.getBooleanOperation($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 42:
 this.$ = yy.getOr($$[$0-2], $$[$0]); 
break;
case 44:
 this.$ = yy.getAnd($$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = yy.getNot($$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,9:$V0,11:5,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{1:[3]},{5:[1,16],7:[1,17],8:[1,18]},o($V4,[2,2]),o([5,7,8,27,28,29,30],$V5,{10:[1,19],12:[1,20]}),o($V4,[2,7],{27:$V6,28:$V7,29:$V8,30:$V9}),{9:$Va,11:25,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),{23:[1,27]},{23:[1,28]},{1:[2,1]},{6:29,9:$V0,11:5,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{6:30,9:$V0,11:5,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{9:$Va,11:31,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{9:$Vc,12:$Vd,13:32,30:$Ve,31:33,36:$Vf,37:$Vg},{9:$Va,11:39,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{9:$Va,11:40,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{9:$Va,11:41,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{9:$Va,11:42,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{14:[1,43],27:$V6,28:$V7,29:$V8,30:$V9},o($Vb,$V5),{9:$Vc,12:$Vd,13:44,30:$Ve,31:33,36:$Vf,37:$Vg},{9:$Vc,12:$Vh,26:45,30:$Ve,31:53,36:$Vf,37:$Vg,38:50,46:46,48:47,50:$Vi,51:$Vj,52:$Vk},o($V4,[2,3]),o($V4,[2,4]),o($V4,[2,5],{27:$V6,28:$V7,29:$V8,30:$V9}),{14:[1,54],32:$Vl},o($Vm,[2,23],{30:$Vn,33:$Vo,34:$Vp,35:$Vq}),{9:$Vc,12:$Vd,30:$Ve,31:60,36:$Vf,37:$Vg},{9:$Vc,12:$Vd,30:$Ve,31:61,36:$Vf,37:$Vg},o($Vr,[2,31]),o($Vr,[2,32]),o($Vr,[2,33]),o([5,7,8,14,27],[2,19],{28:$V7,29:$V8,30:$V9}),o([5,7,8,14,27,28],[2,20],{29:$V8,30:$V9}),o([5,7,8,14,27,28,29],[2,21],{30:$V9}),o($Vb,[2,22]),o($Vb,[2,8]),{24:[1,62],32:$Vl},{24:[1,63]},o($Vs,[2,41],{47:[1,64]}),o($Vt,[2,43],{49:[1,65]}),o($Vu,[2,45]),o($Vu,[2,46]),o($Vu,[2,47]),{9:$Vc,12:$Vh,30:$Ve,31:53,36:$Vf,37:$Vg,38:50,48:66,50:$Vi,51:$Vj,52:$Vk},{9:$Vc,12:$Vh,26:67,30:$Ve,31:68,36:$Vf,37:$Vg,38:50,46:46,48:47,50:$Vi,51:$Vj,52:$Vk},{30:$Vn,33:$Vo,34:$Vp,35:$Vq,39:69,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{10:[1,76]},{9:$Vc,12:$Vd,30:$Ve,31:77,36:$Vf,37:$Vg},{9:$Vc,12:$Vd,30:$Ve,31:78,36:$Vf,37:$Vg},{9:$Vc,12:$Vd,30:$Ve,31:79,36:$Vf,37:$Vg},{9:$Vc,12:$Vd,30:$Ve,31:80,36:$Vf,37:$Vg},{9:$Vc,12:$Vd,30:$Ve,31:81,36:$Vf,37:$Vg},o($Vr,[2,29]),{14:$VB,30:$Vn,33:$Vo,34:$Vp,35:$Vq},{12:[1,83]},{12:[1,84]},{9:$Vc,12:$Vh,30:$Ve,31:53,36:$Vf,37:$Vg,38:50,48:85,50:$Vi,51:$Vj,52:$Vk},{9:$Vc,12:$Vh,30:$Ve,31:53,36:$Vf,37:$Vg,38:50,48:86,50:$Vi,51:$Vj,52:$Vk},o($Vu,[2,48]),{14:[1,87]},{14:$VB,30:$Vn,33:$Vo,34:$Vp,35:$Vq,39:69,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA},{9:$Vc,12:$Vd,30:$Ve,31:88,36:$Vf,37:$Vg},o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),{9:$Va,11:89,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},o($Vm,[2,24],{30:$Vn,33:$Vo,34:$Vp,35:$Vq}),o($VD,[2,25],{34:$Vp,35:$Vq}),o($VD,[2,26],{34:$Vp,35:$Vq}),o($Vr,[2,27]),o($Vr,[2,28]),o($Vr,[2,30]),{9:$Va,11:90,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},{9:$Va,11:91,12:$V1,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:$V2,25:$V3},o($Vs,[2,42]),o($Vt,[2,44]),o($Vu,[2,49]),o($Vu,[2,34],{30:$Vn,33:$Vo,34:$Vp,35:$Vq}),o($V4,[2,6],{27:$V6,28:$V7,29:$V8,30:$V9}),{14:[1,92],27:$V6,28:$V7,29:$V8,30:$V9},{14:[1,93],27:$V6,28:$V7,29:$V8,30:$V9},o($Vb,[2,17]),o($Vb,[2,18])],
defaultActions: {16:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip comments */
break;
case 2:return 7;
break;
case 3:/* skip whitespace */
break;
case 4:yy_.yytext = yy_.yytext.slice(1,-1); return 37
break;
case 5:yy_.yytext = yy_.yytext.slice(1,-1); return 37
break;
case 6:return "PROJ"
break;
case 7:return "PROJ"
break;
case 8:return "PROJ"
break;
case 9:return "SEL"
break;
case 10:return "SEL"
break;
case 11:return "SEL"
break;
case 12:return "UNION"
break;
case 13:return "UNION"
break;
case 14:return "UNION"
break;
case 15:return "PRODUCT"
break;
case 16:return "PRODUCT"
break;
case 17:return "INTERSECTION"
break;
case 18:return "INTERSECTION"
break;
case 19:return "INTERSECTION"
break;
case 20:return "INTERSECTION"
break;
case 21:return "TRUE"
break;
case 22:return "FALSE"
break;
case 23:return 9
break;
case 24:return 36
break;
case 25:return 34
break;
case 26:return 35
break;
case 27:return 30
break;
case 28:return 33
break;
case 29:return '^'
break;
case 30:return 52
break;
case 31:return '%'
break;
case 32:return 12
break;
case 33:return 14
break;
case 34:return "COMMA"
break;
case 35:return 23
break;
case 36:return 24
break;
case 37:return "OR"
break;
case 38:return "AND"
break;
case 39:return 10
break;
case 40:return 40
break;
case 41:return 41
break;
case 42:return 43
break;
case 43:return 42
break;
case 44:return 44
break;
case 45:return 45
break;
case 46:return 8
break;
case 47:return 5
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:#[^\n]*)/,/^(?:%[^\n]*)/,/^(?:(\r\n|\r|\n))/,/^(?:\s+)/,/^(?:"[^"]+")/,/^(?:'[^']+')/,/^(?:proj\b)/,/^(?:PROJ\b)/,/^(?:Proj\b)/,/^(?:sel\b)/,/^(?:Sel\b)/,/^(?:SEL\b)/,/^(?:U\b)/,/^(?:u\b)/,/^(?:∪)/,/^(?:X\b)/,/^(?:x\b)/,/^(?:INT\b)/,/^(?:int\b)/,/^(?:Int\b)/,/^(?:∩)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[a-zA-Z][a-zA-Z0-9.]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:&)/,/^(?:<-)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:<>)/,/^(?:;)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ra;
exports.Parser = ra.Parser;
exports.parse = function () { return ra.parse.apply(ra, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}